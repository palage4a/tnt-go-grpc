// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.4
// source: proto/tnt.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TntClient is the client API for Tnt service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TntClient interface {
	Replace(ctx context.Context, in *ReplaceRequest, opts ...grpc.CallOption) (*ReplaceResponse, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
}

type tntClient struct {
	cc grpc.ClientConnInterface
}

func NewTntClient(cc grpc.ClientConnInterface) TntClient {
	return &tntClient{cc}
}

func (c *tntClient) Replace(ctx context.Context, in *ReplaceRequest, opts ...grpc.CallOption) (*ReplaceResponse, error) {
	out := new(ReplaceResponse)
	err := c.cc.Invoke(ctx, "/main.Tnt/Replace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tntClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/main.Tnt/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TntServer is the server API for Tnt service.
// All implementations must embed UnimplementedTntServer
// for forward compatibility
type TntServer interface {
	Replace(context.Context, *ReplaceRequest) (*ReplaceResponse, error)
	Get(context.Context, *GetRequest) (*GetResponse, error)
	mustEmbedUnimplementedTntServer()
}

// UnimplementedTntServer must be embedded to have forward compatible implementations.
type UnimplementedTntServer struct {
}

func (UnimplementedTntServer) Replace(context.Context, *ReplaceRequest) (*ReplaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Replace not implemented")
}
func (UnimplementedTntServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedTntServer) mustEmbedUnimplementedTntServer() {}

// UnsafeTntServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TntServer will
// result in compilation errors.
type UnsafeTntServer interface {
	mustEmbedUnimplementedTntServer()
}

func RegisterTntServer(s grpc.ServiceRegistrar, srv TntServer) {
	s.RegisterService(&Tnt_ServiceDesc, srv)
}

func _Tnt_Replace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TntServer).Replace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.Tnt/Replace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TntServer).Replace(ctx, req.(*ReplaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tnt_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TntServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.Tnt/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TntServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Tnt_ServiceDesc is the grpc.ServiceDesc for Tnt service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Tnt_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "main.Tnt",
	HandlerType: (*TntServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Replace",
			Handler:    _Tnt_Replace_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Tnt_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/tnt.proto",
}
